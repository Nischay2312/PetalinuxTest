/*
*   gpioLinux.c
*   This files contains the functions used to control the GPIOs on the Zynq Soc
*   Author: Nischay Joshi
*   Date: 2023/05/29
*/

#include "gpioLinux.h"


gpio_t *gpio_init(uint32_t gpio_addr, uint32_t gpio_mask){
    gpio_t *mygpio;
    int fd;

    //Open the memory device file
    if((fd = open("/dev/mem", O_RDWR | O_SYNC)) < 0){
        printf("Error: can't open /dev/mem\n");
        exit(-1);
    }

    //Allocate a memory structure
    if((mygpio = malloc(sizeof(gpio_t))) == NULL){
        printf("Error: can't malloc gpio\n");
        exit(-1);
    }

    //Map the GPIO
    mygpio->gpio_addr = gpio_addr;
    mygpio->mem_fd = fd;
    mygpio->gpio = mmap(0, BLOCK_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, mygpio->gpio_addr);
    mygpio->gpio_mask = gpio_mask;

    if(gpio->gpio == MAP_FAILED){
        printf("mmap error %d\n", (int)mygpio->gpio);
        exit(-1);
    }

    return mygpio;
}

void gpio_set(gpio_t *mygpio, uint32_t value){
   *(mygpio->gpio) = (*(mygpio->gpio) & mygpio->gpio_mask) | (value & ~(*(mygpio->gpio_mask)));
}